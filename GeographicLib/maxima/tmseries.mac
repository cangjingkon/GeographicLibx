/*

Compute series approximations for Transverse Mercator Projection

Written by Charles Karney <charles@karney.com>
http://geographiclib.sourceforge.net/

$Id$

Compute coefficient for forward and inverse trigonometric series for
conversion from conformal latitude to rectifying latitude.  This prints
out assignments which with minor editing are suitable for insertion into
C++ code.  (N.B. n^3 in the output means n*n*n; 3/5 means 0.6.)

To run, start maxima and enter

    writefile("tmseries.out")$
    load("tmseries.mac")$
    closefile()$

With maxpow = 6, the output (after less than 10 secs) is

A1=a/(n+1)*(1+n^2/4+n^4/64+n^6/256);
alpha[1]=n/2-2*n^2/3+5*n^3/16+41*n^4/180-127*n^5/288+7891*n^6/37800;
alpha[2]=13*n^2/48-3*n^3/5+557*n^4/1440+281*n^5/630-1983433*n^6/1935360;
alpha[3]=61*n^3/240-103*n^4/140+15061*n^5/26880+167603*n^6/181440;
alpha[4]=49561*n^4/161280-179*n^5/168+6601661*n^6/7257600;
alpha[5]=34729*n^5/80640-3418889*n^6/1995840;
alpha[6]=+212378941*n^6/319334400;
beta[1]=n/2-2*n^2/3+37*n^3/96-n^4/360-81*n^5/512+96199*n^6/604800;
beta[2]=n^2/48+n^3/15-437*n^4/1440+46*n^5/105-1118711*n^6/3870720;
beta[3]=17*n^3/480-37*n^4/840-209*n^5/4480+5569*n^6/90720;
beta[4]=4397*n^4/161280-11*n^5/504-830251*n^6/7257600;
beta[5]=4583*n^5/161280-108847*n^6/3991680;
beta[6]=+20648693*n^6/638668800;

Notation of output matches that of

 L. Krueger,
 Konforme Abbildung des Erdellipsoids in der Ebene
 Royal Prussian Geodetic Institute, New Series 52, 172 pp. (1912).

with gamma replaced by alpha.  The expansion uses the exact formulas for
the projection given in

 L. P. Lee,
 Conformal Projections Based on Elliptic Functions,
 (B. V. Gutsell, Toronto, 1976), 128pp.

Alter maxpow to generate more or less terms for the series
approximations to the forward and reverse projections This has been
tested out to maxpow = 30; but this takes a long time (more than 12
hours).

*/

taylordepth:6$
triginverses:'all$
/* Timing:
  maxpow  time
    4      2s
    6      4s
    8     11s
   10     27s
   12     62s
   20     17m = 998s
   30     279m = 16695s
    */
maxpow:30$ /* Max power for forward and reverse projections */
/* Notation

   m = elliptic function parameter
   v = scaled elliptic function argument = %pi*u/(2*kc)
   e = eccentricity
   e2 = e^2
   phi = geodetic latitude
   beta = conformal latitude
   z = Gauss-Schreiber TM
   w = Thompson projection (scaled by 2*kc/%pi)
   psi = isometric latitude
   s = UTM projection (scaled by 2*ec/%pi)

*/

/*
    revert
       var2 = expr(var1) = series in eps
    to
       var1 = revertexpr(var2) = series in eps

Require that expr(var1) = var1 to order eps^0.  This throws in a
trigreduce to convert to multiple angle trig functions.
*/
reverta(expr,var1,var2,eps,pow):=block([tauacc:1,sigacc:0,dsig],
  dsig:ratdisrep(taylor(expr-var1,eps,0,pow)),
  dsig:subst([var1=var2],dsig),
  for n:1 thru pow do (tauacc:trigreduce(ratdisrep(taylor(
    -dsig*tauacc/n,eps,0,pow))),
    sigacc:sigacc+expand(diff(tauacc,var2,n-1))),
  var2+sigacc)$

/* Complete elliptic integral of 1st kind -- A+S 17.3.11 */
kc(m):=''(%pi/2*(1+sum(((2*i-1)!!/(2*i)!!)^2*m^i,i,1,maxpow)))$
/* Complete elliptic integral of 2nd kind -- A+S 17.3.12 */
ec(m):=''(%pi/2*(1-sum(((2*i-1)!!/(2*i)!!)^2*m^i/(2*i-1),i,1,maxpow)))$

/* Nome -- A+S 17.3.12 */
q(m):=''(block([qtemp,etemp,eqs,m],local(cof,a),
    qtemp:sum(a[i]*m^i,i,1,maxpow+1),
    /* Generalize series from http://mathworld.wolfram.com/Nome.html. eq 11 */
    etemp:expand(diff(qtemp,m)*(1-m)*m*kc(m)^2/(%pi/2)^2-qtemp),
    eqs:[a[1]=1/16],
    cof[i]:=coeff(etemp,m,i),
    for i:2 thru maxpow+1 do block([t],
      cof[i],t:subst(eqs,cof[i]),eqs:cons(solve(t,a[i])[1],eqs)),
    subst(eqs,qtemp)))$

/* Elliptic functions in terms of v = %pi*u/(2*kc) */
/* sn -- A+S 16.23.1 */
sn(v,m):=''(block([],local(sncof),
    sncof[n]:=ratdisrep(taylor(
        2*%pi/kc(m)*multthru(q(m)/m)^(n+1/2)*m^n/(1-q(m)^(2*n+1)),
        m,0,maxpow)),
    sum(sncof[n]*sin((2*n+1)*v),n,0,maxpow)))$

/* nd -- A+S 16.23.6 */
nd(v,m):=''(block([],local(ndcof),
    ndcof[n]:=ratdisrep(taylor(
        2*%pi/kc(m)*(-q(m))^n/(1+q(m)^(2*n))/sqrt(1-m),
        m,0,maxpow)),
    ratdisrep(taylor(%pi/2/kc(m)/sqrt(1-m),m,0,maxpow))+
    sum(ndcof[n]*cos(2*n*v),n,1,maxpow)))$

/* cd -- A+S 16.23.4 */
cd(v,m):=''(block([],local(cdcof),
    cdcof[n]:=ratdisrep(taylor(
        2*%pi/kc(m)*multthru(q(m)/m)^(n+1/2)*(-m)^n/(1-q(m)^(2*n+1)),
        m,0,maxpow)),
    sum(cdcof[n]*cos((2*n+1)*v),n,0,maxpow)))$

/* Expansion for asin(x+eps) for small eps.  Equivalent to
   taylor(asin(x + eps), eps, 0, maxpow)
   except that taylor returns a very messy expression.  */
asinexp(x,eps):=''(block([asintemp,etemp,eqs],local(b,cof),
asintemp:sum(b[i]*eps^i,i,0,maxpow), etemp:x+eps - sin(asintemp),
etemp:ratdisrep(taylor(etemp,eps,0,maxpow)), cof[i]:=coeff(etemp,eps,i),
eqs:[b[0]=asin(x)], for i:1 thru maxpow do
block([t],cof[i],t:subst(eqs,cof[i]),eqs:cons(solve(t,b[i])[1],eqs)),
subst(eqs,asintemp)))$

/* Convert from n to e^2 */
e2_n(n):=4*n/(1+n)^2$

/* beta in terms of phi.  The expansion of
   beta = asin(tanh( tanh(sin(phi)) + e * atanh(e * sin(phi)) ))
*/
beta_phi(phi,e2):=''(block([psi,sinbet,bet,qq],
    /* Here tanh(qq) = sin(phi) */
    psi:qq-e*atanh(e*tanh(qq)),
    psi:subst([e=sqrt(e2),qq=atanh(sin(phi))],
      ratdisrep(taylor(psi,e,0,2*maxpow))),
    sinbet:ratdisrep(taylor(tanh(psi),e2,0,maxpow)),
    bet:asinexp(sin(phi),sinbet-sin(phi)),
    bet:ratdisrep(taylor(bet,e2,0,maxpow)),
    bet:ratsimp((bet-phi)*cos(phi)/sqrt(1-sin(phi)^2))+phi,
    trigreduce(bet)))$

/* phi in terms of beta */
phi_beta(beta,e2):=''(reverta(beta_phi(phi,e2),phi,beta,e2,maxpow))$

/* z in terms of w.  The expansion of
   z = asin(tanh( tanh(snw) + e * atanh(e * snw) ))
   where snw = sn( w * 2*kc/%pi )
*/
z_w(w,e2):=''(block([psia,sinbeta,beta,qq],
    /* Here tanh(qq) = sn(w,e2) */
    psia:qq-e*atanh(e*tanh(qq)),
    psia:subst([e=sqrt(e2),qq=atanh(snu)],
      ratdisrep(taylor(psia,e,0,2*maxpow))),
    sinbeta:ratdisrep(taylor(tanh(psia),e2,0,maxpow)),
    sinbeta:ratdisrep(taylor(
        subst([snu=trigexpand(sn(w,e2))], sinbeta),
        e2,0,maxpow)),
    sinbeta:ratdisrep(taylor(
        subst([cos(w)=sqrt(1-sin(w)^2)], sinbeta),
        e2,0,maxpow)),
    beta:asinexp(sin(w),sinbeta-sin(w)),
    beta:ratdisrep(taylor(beta,e2,0,maxpow)),
    beta:ratsimp((beta-w)*cos(w)/sqrt(1-sin(w)^2))+w,
    trigreduce(beta)))$
z_w_a(w,n):=''(trigreduce(taylor(z_w(w,e2_n(n)),n,0,maxpow)))$

/* w in terms of z */
w_z(z,e2):=''(reverta(z_w(w,e2),w,z,e2,maxpow))$
w_z_a(z,n):=''(trigreduce(taylor(w_z(z,e2_n(n)),n,0,maxpow)))$
kill(psia,sinbeta,beta)$

/* s in terms of w.  The expansion of
   s = pi/2 * int(ndw^2, w) / int(ndw^2, w, 0, pi/2)
   where ndw = nd( w * 2*kc/%pi )
*/
s_w(w,e2):=''(block([nd2,mm],
    /* nd^2 */
    nd2:expand(trigreduce(ratdisrep(taylor(nd(w,e2)^2,e2,0,maxpow)))),
    nd2:block([t:sum(cos(i*w)*ratsimp(coeff(nd2,cos(i*w))),i,1,2*maxpow)],
      ratsimp(nd2-t)+t),
    mm:%pi/2*integrate(nd2,w)/integrate(nd2,w,0,%pi/2),
    ratdisrep(taylor(mm,e2,0,maxpow))))$
s_w_a(w,n):=''(trigreduce(taylor(s_w(w,e2_n(n)),n,0,maxpow)))$

/* w in terms of s */
w_s(s,e2):=''(reverta(s_w(w,e2),w,s,e2,maxpow))$
w_s_a(s,n):=''(trigreduce(taylor(w_s(s,e2_n(n)),n,0,maxpow)))$

/* s in terms of z */
/* This is slow.  The next version speeds it up a little.
s_z(z,n):=''(expand(trigreduce(ratdisrep(
        taylor(s_w_a(w_z_a(z,n),n),n,0,maxpow)))))$
*/
s_z(z,n):=''(block([ww:w_z_a(z,n),ss:expand(s_w_a(w,n)),acc:0],
    for i:0 thru maxpow do (
      ww:ratdisrep(taylor(ww,n,0,maxpow-i)),
      acc:acc + expand(n^i * trigreduce(ratdisrep(taylor(
              subst([w=ww],coeff(ss,n,i)),n,0,maxpow-i))))),
    acc))$

/* z in terms of s */
/* This is slow.  The next version speeds it up a little.
z_s(s,n):=''(expand(trigreduce(ratdisrep(
        taylor(z_w_a(w_s_a(s,n),n),n,0,maxpow)))))$
*/
z_s(s,n):=''(block([ww:w_s_a(s,n),zz:expand(z_w_a(w,n)),acc:0],
    for i:0 thru maxpow do (
      ww:ratdisrep(taylor(ww,n,0,maxpow-i)),
      acc:acc + expand(n^i * trigreduce(ratdisrep(taylor(
              subst([w=ww],coeff(zz,n,i)),n,0,maxpow-i))))),
    acc))$

a1(n):=''(ratdisrep(taylor(ec(e2_n(n))*(1+n)/(%pi/2),n,0,maxpow))/(1+n))$

printa1():=block([aa:a1(n)],
  print(concat("A=",string(a/(n+1)),"*(",
      string(taylor(a1(n)*(1+n),n,0,maxpow)),");")),
  0)$
printtxf():=block([alpha:s_z(z,n),t],
  for i:1 thru maxpow do (t:coeff(alpha,sin(2*i*z)),
    print(concat("alpha[",i,"]=",string(taylor(t,n,0,maxpow)),";")),
    alpha:alpha-expand(t*sin(2*i*z))),
/* should return zero */
  alpha:alpha-z)$
printtxr():=block([beta:z_s(s,n),t],
  for i:1 thru maxpow do (t:coeff(beta,sin(2*i*s)),
    print(concat("beta[",i,"]=",string(taylor(-t,n,0,maxpow)),";")),
    beta:beta-expand(t*sin(2*i*s))),
/* should return zero */
  beta:beta-s)$

printseries():=[printa1(),printtxf(),printtxr()]$

/* Define array functions which are be read by tm.mac */
defarrayfuns():=block([aa:a1(n)*(1+n),alpha:s_z(z,n),beta:z_s(s,n),t],
  for i:1 thru maxpow do (
    define(a1_a[i](n),ratdisrep(taylor(aa,n,0,i))/(1+n)),
    t:expand(ratdisrep(taylor(alpha,n,0,i))),
    define(s_z_a[i](z,n),z+sum(coeff(t,sin(2*k*z))*sin(2*k*z),k,1,i)),
    t:diff(t,z),
    define(s_z_d[i](z,n),1+sum(coeff(t,cos(2*k*z))*cos(2*k*z),k,1,i)),
    t:expand(ratdisrep(taylor(beta,n,0,i))),
    define(z_s_a[i](s,n),s+sum(coeff(t,sin(2*k*s))*sin(2*k*s),k,1,i)),
    t:diff(t,s),
    define(z_s_d[i](s,n),1+sum(coeff(t,cos(2*k*s))*cos(2*k*s),k,1,i))))$

printseries()$
defarrayfuns()$
