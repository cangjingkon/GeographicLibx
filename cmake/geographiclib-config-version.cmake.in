# Version checking for GeographicLib

set (PACKAGE_VERSION "@GeographicLib_VERSION@")
set (PACKAGE_VERSION_MAJOR "@GeographicLib_VERSION_MAJOR@")
set (PACKAGE_VERSION_MINOR "@GeographicLib_VERSION_MINOR@")

if (WIN32 AND NOT "${CMAKE_GENERATOR}" STREQUAL "@CMAKE_GENERATOR@")
  # Reject if there's a mismatch on compiler versions (Windows only)
  set (PACKAGE_VERSION_UNSUITABLE TRUE)
elseif (PACKAGE_FIND_VERSION)
  if (${PACKAGE_FIND_VERSION} VERSION_EQUAL ${PACKAGE_VERSION})
    set (PACKAGE_VERSION_EXACT TRUE)
  elseif (${PACKAGE_FIND_VERSION} VERSION_LESS ${PACKAGE_VERSION}
    AND ${PACKAGE_FIND_VERSION_MAJOR} EQUAL ${PACKAGE_VERSION_MAJOR})
    set (PACKAGE_VERSION_COMPATIBLE TRUE)
  endif ()
endif ()

set (GeographicLib_NETGeographic_FOUND @BUILD_NETGEOGRAPHIC@)

# Check for the components requested.  The convention is that
# GeographicLib_${comp}_FOUND should be true for all the required
# components.
if (GeographicLib_FIND_COMPONENTS)
  foreach (comp ${GeographicLib_FIND_COMPONENTS})
    if (GeographicLib_FIND_REQUIRED_${comp} AND NOT GeographicLib_${comp}_FOUND)
      set (PACKAGE_VERSION_UNSUITABLE TRUE)
    endif ()
  endforeach ()
endif ()

if (0)
# check that the user requested components 
# are actually targets that are part of this build
if (GeographicLib_FIND_COMPONENTS)
  foreach (comp ${GeographicLib_FIND_COMPONENTS})
    if (NOT TARGET ${comp})
      set (GeographicLib_${comp}_FOUND 0)
      if (GeographicLib_FIND_REQUIRED_${comp})
        message (FATAL_ERROR "GeographicLib ${comp} not available.")
      endif ()
    else ()
      set (GeographicLib_${comp}_FOUND 1)
    endif ()
  endforeach ()
endif ()
endif ()
